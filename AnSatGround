
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   <!--
This HTML was auto-generated from MATLAB code.
To make changes, update the MATLAB code and republish this document.
      --><title>Sati</title><meta name="generator" content="MATLAB 8.1"><link rel="schema.DC" href="http://purl.org/dc/elements/1.1/"><meta name="DC.date" content="2014-09-23"><meta name="DC.source" content="Sati.m"><style type="text/css">
html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,font,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td{margin:0;padding:0;border:0;outline:0;font-size:100%;vertical-align:baseline;background:transparent}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:'';content:none}:focus{outine:0}ins{text-decoration:none}del{text-decoration:line-through}table{border-collapse:collapse;border-spacing:0}

html { min-height:100%; margin-bottom:1px; }
html body { height:100%; margin:0px; font-family:Arial, Helvetica, sans-serif; font-size:10px; color:#000; line-height:140%; background:#fff none; overflow-y:scroll; }
html body td { vertical-align:top; text-align:left; }

h1 { padding:0px; margin:0px 0px 25px; font-family:Arial, Helvetica, sans-serif; font-size:1.5em; color:#d55000; line-height:100%; font-weight:normal; }
h2 { padding:0px; margin:0px 0px 8px; font-family:Arial, Helvetica, sans-serif; font-size:1.2em; color:#000; font-weight:bold; line-height:140%; border-bottom:1px solid #d6d4d4; display:block; }
h3 { padding:0px; margin:0px 0px 5px; font-family:Arial, Helvetica, sans-serif; font-size:1.1em; color:#000; font-weight:bold; line-height:140%; }

a { color:#005fce; text-decoration:none; }
a:hover { color:#005fce; text-decoration:underline; }
a:visited { color:#004aa0; text-decoration:none; }

p { padding:0px; margin:0px 0px 20px; }
img { padding:0px; margin:0px 0px 20px; border:none; }
p img, pre img, tt img, li img { margin-bottom:0px; } 

ul { padding:0px; margin:0px 0px 20px 23px; list-style:square; }
ul li { padding:0px; margin:0px 0px 7px 0px; }
ul li ul { padding:5px 0px 0px; margin:0px 0px 7px 23px; }
ul li ol li { list-style:decimal; }
ol { padding:0px; margin:0px 0px 20px 0px; list-style:decimal; }
ol li { padding:0px; margin:0px 0px 7px 23px; list-style-type:decimal; }
ol li ol { padding:5px 0px 0px; margin:0px 0px 7px 0px; }
ol li ol li { list-style-type:lower-alpha; }
ol li ul { padding-top:7px; }
ol li ul li { list-style:square; }

.content { font-size:1.2em; line-height:140%; padding: 20px; }

pre, tt, code { font-size:12px; }
pre { margin:0px 0px 20px; }
pre.error { color:red; }
pre.codeinput { padding:10px; border:1px solid #d3d3d3; background:#f7f7f7; }
pre.codeoutput { padding:10px 11px; margin:0px 0px 20px; color:#4c4c4c; }

@media print { pre.codeinput, pre.codeoutput { word-wrap:break-word; width:100%; } }

span.keyword { color:#0000FF }
span.comment { color:#228B22 }
span.string { color:#A020F0 }
span.untermstring { color:#B20000 }
span.syscmd { color:#B28C00 }

.footer { width:auto; padding:10px 0px; margin:25px 0px 0px; border-top:1px dotted #878787; font-size:0.8em; line-height:140%; font-style:italic; color:#878787; text-align:left; float:none; }
.footer p { margin:0px; }
.footer a { color:#878787; }
.footer a:hover { color:#878787; text-decoration:underline; }
.footer a:visited { color:#878787; }

table th { padding:7px 5px; text-align:left; vertical-align:middle; border: 1px solid #d6d4d4; font-weight:bold; }
table td { padding:7px 5px; text-align:left; vertical-align:top; border:1px solid #d6d4d4; }





  </style></head><body><div class="content"><pre class="codeinput"><span class="keyword">function</span> varargout = Sati(varargin)
<span class="comment">% SATI MATLAB code for Sati.fig</span>
<span class="comment">%      SATI, by itself, creates a new SATI or raises the existing</span>
<span class="comment">%      singleton*.</span>
<span class="comment">%</span>
<span class="comment">%      H = SATI returns the handle to a new SATI or the handle to</span>
<span class="comment">%      the existing singleton*.</span>
<span class="comment">%</span>
<span class="comment">%      SATI('CALLBACK',hObject,eventData,handles,...) calls the local</span>
<span class="comment">%      function named CALLBACK in SATI.M with the given input arguments.</span>
<span class="comment">%</span>
<span class="comment">%      SATI('Property','Value',...) creates a new SATI or raises the</span>
<span class="comment">%      existing singleton*.  Starting from the left, property value pairs are</span>
<span class="comment">%      applied to the GUI before Sati_OpeningFcn gets called.  An</span>
<span class="comment">%      unrecognized property name or invalid value makes property application</span>
<span class="comment">%      stop.  All inputs are passed to Sati_OpeningFcn via varargin.</span>
<span class="comment">%</span>
<span class="comment">%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one</span>
<span class="comment">%      instance to run (singleton)".</span>
<span class="comment">%</span>
<span class="comment">% See also: GUIDE, GUIDATA, GUIHANDLES</span>

<span class="comment">% Edit the above text to modify the response to help Sati</span>

<span class="comment">% Last Modified by GUIDE v2.5 17-Sep-2014 03:42:14</span>

<span class="comment">% Begin initialization code - DO NOT EDIT</span>
gui_Singleton = 1;
gui_State = struct(<span class="string">'gui_Name'</span>,       mfilename, <span class="keyword">...</span>
                   <span class="string">'gui_Singleton'</span>,  gui_Singleton, <span class="keyword">...</span>
                   <span class="string">'gui_OpeningFcn'</span>, @Sati_OpeningFcn, <span class="keyword">...</span>
                   <span class="string">'gui_OutputFcn'</span>,  @Sati_OutputFcn, <span class="keyword">...</span>
                   <span class="string">'gui_LayoutFcn'</span>,  [] , <span class="keyword">...</span>
                   <span class="string">'gui_Callback'</span>,   []);
<span class="keyword">if</span> nargin &amp;&amp; ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
<span class="keyword">end</span>

<span class="keyword">if</span> nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
<span class="keyword">else</span>
    gui_mainfcn(gui_State, varargin{:});
<span class="keyword">end</span>
<span class="comment">% End initialization code - DO NOT EDIT</span>


<span class="comment">% --- Executes just before Sati is made visible.</span>
<span class="keyword">function</span> Sati_OpeningFcn(hObject, eventdata, handles, varargin)
<span class="comment">% This function has no output args, see OutputFcn.</span>
<span class="comment">% hObject    handle to figure</span>
<span class="comment">% eventdata  reserved - to be defined in a future version of MATLAB</span>
<span class="comment">% handles    structure with handles and user data (see GUIDATA)</span>
<span class="comment">% varargin   command line arguments to Sati (see VARARGIN)</span>

<span class="comment">% Choose default command line output for Sati</span>
handles.output = hObject;

<span class="comment">% Update handles structure</span>
guidata(hObject, handles);

<span class="comment">% UIWAIT makes Sati wait for user response (see UIRESUME)</span>
<span class="comment">% uiwait(handles.figure1);</span>


<span class="comment">% --- Outputs from this function are returned to the command line.</span>
<span class="keyword">function</span> varargout = Sati_OutputFcn(hObject, eventdata, handles)
<span class="comment">% varargout  cell array for returning output args (see VARARGOUT);</span>
<span class="comment">% hObject    handle to figure</span>
<span class="comment">% eventdata  reserved - to be defined in a future version of MATLAB</span>
<span class="comment">% handles    structure with handles and user data (see GUIDATA)</span>

<span class="comment">% Get default command line output from handles structure</span>
varargout{1} = handles.output;


<span class="comment">% --- Executes on button press in pushbutton1.</span>
<span class="keyword">function</span> pushbutton1_Callback(hObject, eventdata, handles)
set(handles.porttext,<span class="string">'Enable'</span>,<span class="string">'off'</span>);
clc;
dataobj=sensorgroup(<span class="string">'AndroidMobile'</span>);
accelvector=accellog(dataobj);


<span class="keyword">while</span> 1
<span class="keyword">while</span> 1
    [o, t] = orientlog(dataobj);
    [a, t1] = accellog(dataobj);
    pause(0.000000000001);


    <span class="keyword">break</span>;
<span class="keyword">end</span>

f = figure;
hold <span class="string">on</span>
ylim([-180 360]);
grid <span class="string">on</span>
xlabel(<span class="string">'Timestamp'</span>)
ylabel(<span class="string">'Angle(degrees)'</span>)
hleg1 = legend(<span class="string">'Azimuth'</span>, <span class="string">'Roll'</span>, <span class="string">'Pitch'</span>);
pause(0.0000001);
plothold=plot(handles.axes1,t, o(:,:), <span class="string">'-ro'</span>, t, o(:,:), <span class="string">'-.g'</span>, t, o(:,:), <span class="string">'-.b'</span>);
plothold1=plot(handles.axes2,t1, a(:,:), <span class="string">'-ro'</span>, t1, a(:,:), <span class="string">'-.g'</span>, t1, a(:,:), <span class="string">'-.b'</span>);




hold
uiwait(f,0.0000000000005)
close(f)





<span class="keyword">end</span>






<span class="comment">% hObject    handle to pushbutton1 (see GCBO)</span>
<span class="comment">% eventdata  reserved - to be defined in a future version of MATLAB</span>
<span class="comment">% handles    structure with handles and user data (see GUIDATA)</span>


<span class="comment">% --- Executes on button press in camera.</span>
<span class="keyword">function</span> camera_Callback(hObject, eventdata, handles)
url2=get(handles.feedtext,<span class="string">'String'</span>);
url1 = <span class="string">'http://'</span>;
url3=<span class="string">'/shot.jpg'</span>;
url=strcat(url1,url2,url3);
ss  = imread(url);
fh = image(ss);

<span class="keyword">while</span>(1)

    ss  = imread(url);
    handles.axes3
    set(fh,<span class="string">'CData'</span>,ss);
    drawnow;
<span class="keyword">end</span>
<span class="comment">% hObject    handle to camera (see GCBO)</span>
<span class="comment">% eventdata  reserved - to be defined in a future version of MATLAB</span>
<span class="comment">% handles    structure with handles and user data (see GUIDATA)</span>


<span class="comment">% --- Executes on button press in kill.</span>
<span class="keyword">function</span> kill_Callback(hObject, eventdata, handles)
<span class="comment">% hObject    handle to kill (see GCBO)</span>
<span class="comment">% eventdata  reserved - to be defined in a future version of MATLAB</span>
<span class="comment">% handles    structure with handles and user data (see GUIDATA)</span>


<span class="comment">% --- Executes on button press in pushbutton4.</span>
<span class="keyword">function</span> pushbutton4_Callback(hObject, eventdata, handles)
<span class="comment">%Android Data Read%</span>
instrreset

  clc
<span class="comment">%Lets Begin%</span>
<span class="comment">%Defining DataRead Object%</span>
rawdata1=udp(<span class="string">'192.168.0.3'</span>,<span class="string">'LocalPort'</span>,12345);
set(rawdata1,<span class="string">'DatagramTerminateMode'</span>,<span class="string">'off'</span>)
<span class="comment">%Defining BarGraph%</span>
barplot=bar([0,0,0]);

lag=0;

<span class="comment">%Looping an Infinite Data Read%</span>
<span class="keyword">while</span> 1
    tic <span class="comment">%Start Timer%</span>
    fopen(rawdata1);
    finprint=fscanf(rawdata1);
    ordprint=textscan(finprint,<span class="string">'%s %d %f %f %f %f %s %d %f %f %f %f  '</span>,<span class="string">'Delimiter'</span>,<span class="string">','</span>);<span class="comment">%Define Data Print Format &amp; Store in Array%</span>
    finaldata=[ordprint{4},ordprint{5},ordprint{6}];
    <span class="keyword">if</span> size(finaldata,1)==1
        finaldata(1)=finaldata(1)-180;
       axes(handles.axes4);
        set(barplot,<span class="string">'YData'</span>,finaldata(1,:));
        axis([0.5,3.5,-180,180]);

    pause(0.000001);
    <span class="keyword">end</span>
  clc
  disp(<span class="string">'Data received:'</span>)
  disp(finaldata)
  disp(<span class="string">'Longest Lag:'</span>)
  disp(lag)
  fclose(rawdata1);
  t=toc;
  longestLag=max(t,lag);


<span class="keyword">end</span>

<span class="comment">% hObject    handle to pushbutton4 (see GCBO)</span>
<span class="comment">% eventdata  reserved - to be defined in a future version of MATLAB</span>
<span class="comment">% handles    structure with handles and user data (see GUIDATA)</span>



<span class="keyword">function</span> feedtext_Callback(hObject, eventdata, handles)
<span class="comment">% hObject    handle to feedtext (see GCBO)</span>
<span class="comment">% eventdata  reserved - to be defined in a future version of MATLAB</span>
<span class="comment">% handles    structure with handles and user data (see GUIDATA)</span>

<span class="comment">% Hints: get(hObject,'String') returns contents of feedtext as text</span>
<span class="comment">%        str2double(get(hObject,'String')) returns contents of feedtext as a double</span>


<span class="comment">% --- Executes during object creation, after setting all properties.</span>
<span class="keyword">function</span> feedtext_CreateFcn(hObject, eventdata, handles)
<span class="comment">% hObject    handle to feedtext (see GCBO)</span>
<span class="comment">% eventdata  reserved - to be defined in a future version of MATLAB</span>
<span class="comment">% handles    empty - handles not created until after all CreateFcns called</span>

<span class="comment">% Hint: edit controls usually have a white background on Windows.</span>
<span class="comment">%       See ISPC and COMPUTER.</span>
<span class="keyword">if</span> ispc &amp;&amp; isequal(get(hObject,<span class="string">'BackgroundColor'</span>), get(0,<span class="string">'defaultUicontrolBackgroundColor'</span>))
    set(hObject,<span class="string">'BackgroundColor'</span>,<span class="string">'white'</span>);
<span class="keyword">end</span>



<span class="keyword">function</span> porttext_Callback(hObject, eventdata, handles)
<span class="comment">% hObject    handle to porttext (see GCBO)</span>
<span class="comment">% eventdata  reserved - to be defined in a future version of MATLAB</span>
<span class="comment">% handles    structure with handles and user data (see GUIDATA)</span>

<span class="comment">% Hints: get(hObject,'String') returns contents of porttext as text</span>
<span class="comment">%        str2double(get(hObject,'String')) returns contents of porttext as a double</span>


<span class="comment">% --- Executes during object creation, after setting all properties.</span>
<span class="keyword">function</span> porttext_CreateFcn(hObject, eventdata, handles)
<span class="comment">% hObject    handle to porttext (see GCBO)</span>
<span class="comment">% eventdata  reserved - to be defined in a future version of MATLAB</span>
<span class="comment">% handles    empty - handles not created until after all CreateFcns called</span>

<span class="comment">% Hint: edit controls usually have a white background on Windows.</span>
<span class="comment">%       See ISPC and COMPUTER.</span>
<span class="keyword">if</span> ispc &amp;&amp; isequal(get(hObject,<span class="string">'BackgroundColor'</span>), get(0,<span class="string">'defaultUicontrolBackgroundColor'</span>))
    set(hObject,<span class="string">'BackgroundColor'</span>,<span class="string">'white'</span>);
<span class="keyword">end</span>
</pre><img vspace="5" hspace="5" src="Sati_01.png" alt=""> <p class="footer"><br><a href="http://www.mathworks.com/products/matlab/">Published with MATLAB&reg; R2013a</a><br></p></div><!--
##### SOURCE BEGIN #####
function varargout = Sati(varargin)
% SATI MATLAB code for Sati.fig
%      SATI, by itself, creates a new SATI or raises the existing
%      singleton*.
%
%      H = SATI returns the handle to a new SATI or the handle to
%      the existing singleton*.
%
%      SATI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in SATI.M with the given input arguments.
%
%      SATI('Property','Value',...) creates a new SATI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before Sati_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to Sati_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help Sati

% Last Modified by GUIDE v2.5 17-Sep-2014 03:42:14

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @Sati_OpeningFcn, ...
                   'gui_OutputFcn',  @Sati_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% REPLACE_WITH_DASH_DASH- Executes just before Sati is made visible.
function Sati_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to Sati (see VARARGIN)

% Choose default command line output for Sati
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes Sati wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% REPLACE_WITH_DASH_DASH- Outputs from this function are returned to the command line.
function varargout = Sati_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% REPLACE_WITH_DASH_DASH- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
set(handles.porttext,'Enable','off');
clc;
dataobj=sensorgroup('AndroidMobile');
accelvector=accellog(dataobj);


while 1
while 1
    [o, t] = orientlog(dataobj);
    [a, t1] = accellog(dataobj);
    pause(0.000000000001);
   
    
    break;
end

f = figure;
hold on
ylim([-180 360]);
grid on
xlabel('Timestamp')
ylabel('Angle(degrees)')
hleg1 = legend('Azimuth', 'Roll', 'Pitch');
pause(0.0000001);
plothold=plot(handles.axes1,t, o(:,:), '-ro', t, o(:,:), '-.g', t, o(:,:), '-.b');
plothold1=plot(handles.axes2,t1, a(:,:), '-ro', t1, a(:,:), '-.g', t1, a(:,:), '-.b');




hold
uiwait(f,0.0000000000005)
close(f)




    
end
   





% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% REPLACE_WITH_DASH_DASH- Executes on button press in camera.
function camera_Callback(hObject, eventdata, handles)
url2=get(handles.feedtext,'String');
url1 = 'http://';
url3='/shot.jpg';
url=strcat(url1,url2,url3);
ss  = imread(url);
fh = image(ss);

while(1)
    
    ss  = imread(url);
    handles.axes3
    set(fh,'CData',ss);
    drawnow;
end
% hObject    handle to camera (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% REPLACE_WITH_DASH_DASH- Executes on button press in kill.
function kill_Callback(hObject, eventdata, handles)
% hObject    handle to kill (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% REPLACE_WITH_DASH_DASH- Executes on button press in pushbutton4.
function pushbutton4_Callback(hObject, eventdata, handles)
%Android Data Read%
instrreset
  
  clc
%Lets Begin%
%Defining DataRead Object%
rawdata1=udp('192.168.0.3','LocalPort',12345);
set(rawdata1,'DatagramTerminateMode','off')
%Defining BarGraph%
barplot=bar([0,0,0]);

lag=0;

%Looping an Infinite Data Read%
while 1
    tic %Start Timer%
    fopen(rawdata1);
    finprint=fscanf(rawdata1);
    ordprint=textscan(finprint,'%s %d %f %f %f %f %s %d %f %f %f %f  ','Delimiter',',');%Define Data Print Format & Store in Array%
    finaldata=[ordprint{4},ordprint{5},ordprint{6}];
    if size(finaldata,1)==1
        finaldata(1)=finaldata(1)-180;
       axes(handles.axes4);
        set(barplot,'YData',finaldata(1,:));
        axis([0.5,3.5,-180,180]);
         
    pause(0.000001);
    end
  clc
  disp('Data received:')
  disp(finaldata)
  disp('Longest Lag:')
  disp(lag)
  fclose(rawdata1);
  t=toc;
  longestLag=max(t,lag);
    
    
end

% hObject    handle to pushbutton4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)



function feedtext_Callback(hObject, eventdata, handles)
% hObject    handle to feedtext (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of feedtext as text
%        str2double(get(hObject,'String')) returns contents of feedtext as a double


% REPLACE_WITH_DASH_DASH- Executes during object creation, after setting all properties.
function feedtext_CreateFcn(hObject, eventdata, handles)
% hObject    handle to feedtext (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function porttext_Callback(hObject, eventdata, handles)
% hObject    handle to porttext (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of porttext as text
%        str2double(get(hObject,'String')) returns contents of porttext as a double


% REPLACE_WITH_DASH_DASH- Executes during object creation, after setting all properties.
function porttext_CreateFcn(hObject, eventdata, handles)
% hObject    handle to porttext (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

##### SOURCE END #####
--></body></html>
